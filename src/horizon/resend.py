import resend
import json
import os
from typing import Dict, Any, List
from datetime import datetime

class NVIDIAEmailSender:
    def __init__(self, api_key: str):
        """Initialize Resend email sender with API key"""
        resend.api_key = api_key
        
    def format_task_results_for_email(self, task_results: Dict[str, Any]) -> str:
        """Format task results into HTML email content"""
        timestamp = datetime.now().strftime("%B %d, %Y at %I:%M %p UTC")
        
        html_content = f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }}
        .header {{
            background: linear-gradient(135deg, #76b900, #5a9216);
            color: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
            text-align: center;
        }}
        .header h1 {{
            margin: 0;
            font-size: 24px;
        }}
        .header p {{
            margin: 10px 0 0 0;
            opacity: 0.9;
        }}
        .task-section {{
            background: #f8f9fa;
            padding: 20px;
            margin: 20px 0;
            border-radius: 8px;
        }}
        .task-title {{
            color: #2d5016;
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
        }}
        .task-icon {{
            margin-right: 10px;
            font-size: 20px;
        }}
        .startup-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 15px;
            margin: 15px 0;
        }}
        .startup-card {{
            background: white;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}
        .startup-name {{
            font-weight: bold;
            color: #2d5016;
            font-size: 16px;
            margin-bottom: 8px;
        }}
        .startup-website {{
            color: #76b900;
            text-decoration: none;
            font-size: 14px;
        }}
        .startup-description {{
            margin: 10px 0;
            font-size: 14px;
            line-height: 1.4;
        }}
        .startup-details {{
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 10px;
            font-size: 13px;
        }}
        .detail-item {{
            background: #f5f5f5;
            padding: 5px 8px;
            border-radius: 4px;
        }}
        .detail-label {{
            font-weight: bold;
            color: #555;
        }}
        .summary-box {{
            background: #e8f5e8;
            border: 1px solid #c3e6c3;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
        }}
        .completion-status {{
            display: inline-block;
            padding: 5px 12px;
            background: #d4edda;
            color: #155724;
            border-radius: 20px;
            font-size: 14px;
            font-weight: bold;
        }}
        .text-content {{
            background: white;
            padding: 15px;
            border-radius: 8px;
            border: 1px solid #e0e0e0;
            margin: 10px 0;
            font-size: 14px;
            line-height: 1.5;
        }}
        .footer {{
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
            color: #666;
            font-size: 13px;
        }}
    </style>
</head>
<body>
    <div class="header">
        <h1>ðŸš€ NVIDIA Inception AI Startup Discovery Report</h1>
        <p>Comprehensive AI Startup Analysis - Brazil</p>
        <p>Generated on {timestamp}</p>
    </div>
"""

        # Process each task result
        for task_name, task_result in task_results.items():
            if task_name in ['total_tasks', 'completion_status']:
                continue
                
            html_content += self._format_task_section(task_name, task_result)
        
        # Add completion summary
        if 'total_tasks' in task_results and 'completion_status' in task_results:
            total_tasks = task_results.get('total_tasks', 'N/A')
            completion_status = task_results.get('completion_status', 'Unknown').upper()
            
        
        html_content += """
            <div class="footer">
                <p>This report was generated by the NVIDIA Inception AI Startup Discovery System</p>
            </div>
        </body>
        </html>
        """
        
        return html_content
    
    def _format_task_section(self, task_name: str, task_result: Any) -> str:
        """Format individual task section based on task type"""
        # Clean up task name for display
        display_name = self._get_task_display_name(task_name)
        
        section_html = f"""
        <div class="task-section">
            <div class="task-title">
                {display_name}
            </div>
        """
        
        # Handle different types of task results
        if isinstance(task_result, str):
            # Try to parse as JSON first
            try:
                parsed_result = json.loads(task_result)
                section_html += self._format_parsed_result(parsed_result)
            except (json.JSONDecodeError, ValueError):
                processed_text = self._process_markdown_formatting(self._format_text_content(task_result))
                section_html += f'<div class="text-content">{processed_text}</div>'
        
        elif isinstance(task_result, (list, dict)):
            section_html += self._format_structured_data(task_result)
        
        else:
            section_html += f'<div class="text-content">{self._escape_html(str(task_result))}</div>'
        
        section_html += "</div>"
        return section_html
    
    def _format_parsed_result(self, data: Dict[str, Any]) -> str:
        """Format parsed JSON data"""
        if isinstance(data, list):
            return self._format_startup_list(data)
        elif isinstance(data, dict) and 'startups' in data:
            return self._format_startup_list(data['startups'])
        else:
            return f'<div class="text-content">{self._format_dict_content(data)}</div>'
    
    def _format_startup_list(self, startups: List[Dict[str, Any]]) -> str:
        """Format list of startups into cards"""
        if not startups:
            return '<div class="text-content">No startups found in this section.</div>'
        
        html = '<div class="startup-grid">'
        
        for startup in startups:
            name = self._escape_html(startup.get('Company Name', startup.get('name', 'Unknown Company')))
            website = startup.get('Website', startup.get('website', ''))
            description = self._escape_html(startup.get('Description', startup.get('description', '')))
            
            html += f'''
            <div class="startup-card">
                <div class="startup-name">{name}</div>'''
            
            if website:
                html += f'<a href="{self._escape_html(website)}" class="startup-website">{self._escape_html(website)}</a>'
            
            if description:
                html += f'<div class="startup-description">{description}</div>'
            
            html += '<div class="startup-details">'
            
            # Add additional details
            for key, value in startup.items():
                if key not in ['Company Name', 'name', 'Website', 'website', 'Description', 'description'] and value:
                    escaped_key = self._escape_html(str(key))
                    escaped_value = self._escape_html(str(value))
                    html += f'''
                    <div class="detail-item">
                        <span class="detail-label">{escaped_key}:</span> {escaped_value}
                    </div>
                    '''
            
            html += '</div></div>'
        
        html += '</div>'
        return html
    
    def _format_structured_data(self, data: Any) -> str:
        """Format structured data (dict or list)"""
        if isinstance(data, list):
            return self._format_startup_list(data)
        elif isinstance(data, dict):
            return f'<div class="text-content">{self._format_dict_content(data)}</div>'
        else:
            return f'<div class="text-content">{self._escape_html(str(data))}</div>'
    
    def _format_dict_content(self, data: Dict[str, Any]) -> str:
        """Format dictionary content for display"""
        html = ""
        for key, value in data.items():
            escaped_key = self._escape_html(str(key))
            if isinstance(value, (dict, list)):
                html += f"<strong>{escaped_key}:</strong><br>"
                try:
                    json_str = json.dumps(value, indent=2)
                    escaped_json = self._escape_html(json_str)
                    html += f"<pre style='background: #f5f5f5; padding: 10px; border-radius: 4px; overflow-x: auto;'>{escaped_json}</pre><br>"
                except:
                    html += f"<pre style='background: #f5f5f5; padding: 10px; border-radius: 4px; overflow-x: auto;'>{self._escape_html(str(value))}</pre><br>"
            else:
                escaped_value = self._process_markdown_formatting(self._escape_html(str(value)))
                html += f"<strong>{escaped_key}:</strong> {escaped_value}<br>"
        return html
    
    def _format_text_content(self, text: str) -> str:
        """Format plain text content with basic HTML formatting"""
        # Escape HTML first
        escaped_text = self._escape_html(text)
        
        # Convert newlines to HTML breaks
        formatted_text = escaped_text.replace('\n', '<br>')
        
        return formatted_text
    
    def _escape_html(self, text: str) -> str:
        """Escape HTML characters"""
        if not isinstance(text, str):
            text = str(text)
        
        return (text.replace('&', '&amp;')
                   .replace('<', '&lt;')
                   .replace('>', '&gt;')
                   .replace('"', '&quot;')
                   .replace("'", '&#x27;'))
    
    def _get_task_display_name(self, task_name: str) -> str:
        """Get human-readable task name"""
        task_names = {
            'Discover AI startups in Brazil by researching': 'AI Startup Discovery',
            'For each discovered startup, conduct detailed tech': 'Technical Analysis',
            'Research comprehensive funding information for eac': 'Funding Research',
            'Identify and profile key technical leadership for ': 'Leadership Profiling',
            'Conduct comprehensive market analysis for Brazil A': 'Market Intelligence',
            'Validate all collected startup information and cre': 'Validation & Scoring'
        }
        
        for key, display_name in task_names.items():
            if task_name.startswith(key):
                return display_name
        
        return task_name[:50] + "..." if len(task_name) > 50 else task_name
    
    def _process_markdown_formatting(self, text: str) -> str:
        """Process markdown formatting in text"""
        import re
        
        # Handle **bold** text
        text = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', text)
        
        # Handle *italic* text (but not the ones already processed as bold)
        text = re.sub(r'(?<!\*)\*([^*]+)\*(?!\*)', r'<em>\1</em>', text)
        
        # Handle markdown links [text](url)
        text = re.sub(r'\[([^\]]+)\]\(([^)]+)\)', r'<a href="\2" style="color: #76b900;">\1</a>', text)
        
        return text
    
    def send_report_email(self, 
                         task_results: Dict[str, Any], 
                         to_emails: List[str], 
                         subject: str = "NVIDIA Inception AI Startup Discovery Report",
                         from_email: str = "noreply@yourdomain.com") -> Dict[str, Any]:
        """Send formatted task results via email"""
        
        html_content = self.format_task_results_for_email(task_results)
        
        # Create text version for better compatibility
        text_content = self._create_text_version(task_results)
        
        try:
            params = {
                "from": from_email,
                "to": to_emails,
                "subject": subject,
                "html": html_content,
                "text": text_content
            }
            
            response = resend.Emails.send(params)
            
            return {
                "success": True,
                "message": "Email sent successfully",
                "email_id": response.get('id'),
                "recipients": to_emails
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "recipients": to_emails
            }
    
    def _create_text_version(self, task_results: Dict[str, Any]) -> str:
        """Create plain text version of the report"""
        timestamp = datetime.now().strftime("%B %d, %Y at %I:%M %p UTC")
        
        text_content = f"""
NVIDIA Inception AI Startup Discovery Report
============================================

Generated on: {timestamp}

"""

        for task_name, task_result in task_results.items():
            if task_name in ['total_tasks', 'completion_status']:
                continue
                
            display_name = self._get_task_display_name(task_name)
            text_content += f"\n{display_name}\n"
            text_content += "=" * len(display_name) + "\n\n"
            
            if isinstance(task_result, str):
                try:
                    parsed_result = json.loads(task_result)
                    text_content += json.dumps(parsed_result, indent=2) + "\n\n"
                except:
                    text_content += task_result + "\n\n"
            else:
                text_content += str(task_result) + "\n\n"
        
        # Add summary
        if 'total_tasks' in task_results and 'completion_status' in task_results:
            total_tasks = task_results.get('total_tasks', 'N/A')
            completion_status = task_results.get('completion_status', 'Unknown').upper()
            
            text_content += f"""
Execution Summary
=================
Total Tasks Completed: {total_tasks}
Status: {completion_status}

---
This report was generated by the NVIDIA Inception AI Startup Discovery System
"""
        
        return text_content